// Code generated by protoc-gen-mcp-go. DO NOT EDIT.
// source: google/bytestream/bytestream.proto

package bytestreammcp

import (
	_ "google.golang.org/genproto/googleapis/bytestream"
)

import (
	"connectrpc.com/connect"
	"context"
	"encoding/json"
	"github.com/mark3labs/mcp-go/mcp"
	mcpserver "github.com/mark3labs/mcp-go/server"
	"github.com/redpanda-data/protoc-gen-go-mcp/pkg/runtime"
	grpc "google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
)

var ()

// ByteStreamServer is compatible with the grpc-go server interface.
type ByteStreamServer interface {
}

// RegisterByteStreamHandler registers standard MCP handlers for ByteStream
func RegisterByteStreamHandler(s *mcpserver.MCPServer, srv ByteStreamServer, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// RegisterByteStreamHandlerOpenAI registers OpenAI-compatible MCP handlers for ByteStream
func RegisterByteStreamHandlerOpenAI(s *mcpserver.MCPServer, srv ByteStreamServer, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// RegisterByteStreamHandlerWithProvider registers handlers for the specified LLM provider
func RegisterByteStreamHandlerWithProvider(s *mcpserver.MCPServer, srv ByteStreamServer, provider runtime.LLMProvider, opts ...runtime.Option) {
	switch provider {
	case runtime.LLMProviderOpenAI:
		RegisterByteStreamHandlerOpenAI(s, srv, opts...)
	case runtime.LLMProviderStandard:
		fallthrough
	default:
		RegisterByteStreamHandler(s, srv, opts...)
	}
}

// ByteStreamClient is compatible with the grpc-go client interface.
type ByteStreamClient interface {
}

// ConnectByteStreamClient is compatible with the connectrpc-go client interface.
type ConnectByteStreamClient interface {
}

// ForwardToConnectByteStreamClient registers a connectrpc client, to forward MCP calls to it.
func ForwardToConnectByteStreamClient(s *mcpserver.MCPServer, client ConnectByteStreamClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// ForwardToByteStreamClient registers a gRPC client, to forward MCP calls to it.
func ForwardToByteStreamClient(s *mcpserver.MCPServer, client ByteStreamClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}
