// Code generated by protoc-gen-mcp-go. DO NOT EDIT.
// source: testdata/test_service.proto

package testdatamcp

import (
	_ "github.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go/testdata"
)

import (
	"context"
	"github.com/mark3labs/mcp-go/mcp"
	mcpserver "github.com/mark3labs/mcp-go/server"
	"encoding/json"
	"google.golang.org/protobuf/encoding/protojson"
	"connectrpc.com/connect"
	grpc "google.golang.org/grpc"
	"github.com/redpanda-data/protoc-gen-go-mcp/pkg/runtime"
)

var ()

// TestServiceServer is compatible with the grpc-go server interface.
type TestServiceServer interface {
}

// RegisterTestServiceHandler registers standard MCP handlers for TestService
func RegisterTestServiceHandler(s *mcpserver.MCPServer, srv TestServiceServer, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// RegisterTestServiceHandlerOpenAI registers OpenAI-compatible MCP handlers for TestService
func RegisterTestServiceHandlerOpenAI(s *mcpserver.MCPServer, srv TestServiceServer, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// RegisterTestServiceHandlerWithProvider registers handlers for the specified LLM provider
func RegisterTestServiceHandlerWithProvider(s *mcpserver.MCPServer, srv TestServiceServer, provider runtime.LLMProvider, opts ...runtime.Option) {
	switch provider {
	case runtime.LLMProviderOpenAI:
		RegisterTestServiceHandlerOpenAI(s, srv, opts...)
	case runtime.LLMProviderStandard:
		fallthrough
	default:
		RegisterTestServiceHandler(s, srv, opts...)
	}
}

// TestServiceClient is compatible with the grpc-go client interface.
type TestServiceClient interface {
}

// ConnectTestServiceClient is compatible with the connectrpc-go client interface.
type ConnectTestServiceClient interface {
}

// ForwardToConnectTestServiceClient registers a connectrpc client, to forward MCP calls to it.
func ForwardToConnectTestServiceClient(s *mcpserver.MCPServer, client ConnectTestServiceClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// ForwardToTestServiceClient registers a gRPC client, to forward MCP calls to it.
func ForwardToTestServiceClient(s *mcpserver.MCPServer, client TestServiceClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}
