// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: testdata/selective_generation_test.proto

package testdataconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	testdata "github.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go/testdata"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SelectiveServiceName is the fully-qualified name of the SelectiveService service.
	SelectiveServiceName = "testdata.SelectiveService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SelectiveServiceEnabledMethodProcedure is the fully-qualified name of the SelectiveService's
	// EnabledMethod RPC.
	SelectiveServiceEnabledMethodProcedure = "/testdata.SelectiveService/EnabledMethod"
	// SelectiveServiceDisabledMethodProcedure is the fully-qualified name of the SelectiveService's
	// DisabledMethod RPC.
	SelectiveServiceDisabledMethodProcedure = "/testdata.SelectiveService/DisabledMethod"
	// SelectiveServiceAnotherEnabledMethodProcedure is the fully-qualified name of the
	// SelectiveService's AnotherEnabledMethod RPC.
	SelectiveServiceAnotherEnabledMethodProcedure = "/testdata.SelectiveService/AnotherEnabledMethod"
	// SelectiveServiceAnotherDisabledMethodProcedure is the fully-qualified name of the
	// SelectiveService's AnotherDisabledMethod RPC.
	SelectiveServiceAnotherDisabledMethodProcedure = "/testdata.SelectiveService/AnotherDisabledMethod"
)

// SelectiveServiceClient is a client for the testdata.SelectiveService service.
type SelectiveServiceClient interface {
	// @mcp
	// EnabledMethod should generate MCP endpoints
	EnabledMethod(context.Context, *connect.Request[testdata.EnabledRequest]) (*connect.Response[testdata.EnabledResponse], error)
	// DisabledMethod should NOT generate MCP endpoints (no @mcp tag)
	DisabledMethod(context.Context, *connect.Request[testdata.DisabledRequest]) (*connect.Response[testdata.DisabledResponse], error)
	// @mcp Enable this endpoint for MCP
	// AnotherEnabledMethod should generate MCP endpoints with additional description
	AnotherEnabledMethod(context.Context, *connect.Request[testdata.AnotherEnabledRequest]) (*connect.Response[testdata.AnotherEnabledResponse], error)
	// This method is also disabled (no @mcp tag)
	AnotherDisabledMethod(context.Context, *connect.Request[testdata.AnotherDisabledRequest]) (*connect.Response[testdata.AnotherDisabledResponse], error)
}

// NewSelectiveServiceClient constructs a client for the testdata.SelectiveService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSelectiveServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SelectiveServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	selectiveServiceMethods := testdata.File_testdata_selective_generation_test_proto.Services().ByName("SelectiveService").Methods()
	return &selectiveServiceClient{
		enabledMethod: connect.NewClient[testdata.EnabledRequest, testdata.EnabledResponse](
			httpClient,
			baseURL+SelectiveServiceEnabledMethodProcedure,
			connect.WithSchema(selectiveServiceMethods.ByName("EnabledMethod")),
			connect.WithClientOptions(opts...),
		),
		disabledMethod: connect.NewClient[testdata.DisabledRequest, testdata.DisabledResponse](
			httpClient,
			baseURL+SelectiveServiceDisabledMethodProcedure,
			connect.WithSchema(selectiveServiceMethods.ByName("DisabledMethod")),
			connect.WithClientOptions(opts...),
		),
		anotherEnabledMethod: connect.NewClient[testdata.AnotherEnabledRequest, testdata.AnotherEnabledResponse](
			httpClient,
			baseURL+SelectiveServiceAnotherEnabledMethodProcedure,
			connect.WithSchema(selectiveServiceMethods.ByName("AnotherEnabledMethod")),
			connect.WithClientOptions(opts...),
		),
		anotherDisabledMethod: connect.NewClient[testdata.AnotherDisabledRequest, testdata.AnotherDisabledResponse](
			httpClient,
			baseURL+SelectiveServiceAnotherDisabledMethodProcedure,
			connect.WithSchema(selectiveServiceMethods.ByName("AnotherDisabledMethod")),
			connect.WithClientOptions(opts...),
		),
	}
}

// selectiveServiceClient implements SelectiveServiceClient.
type selectiveServiceClient struct {
	enabledMethod         *connect.Client[testdata.EnabledRequest, testdata.EnabledResponse]
	disabledMethod        *connect.Client[testdata.DisabledRequest, testdata.DisabledResponse]
	anotherEnabledMethod  *connect.Client[testdata.AnotherEnabledRequest, testdata.AnotherEnabledResponse]
	anotherDisabledMethod *connect.Client[testdata.AnotherDisabledRequest, testdata.AnotherDisabledResponse]
}

// EnabledMethod calls testdata.SelectiveService.EnabledMethod.
func (c *selectiveServiceClient) EnabledMethod(ctx context.Context, req *connect.Request[testdata.EnabledRequest]) (*connect.Response[testdata.EnabledResponse], error) {
	return c.enabledMethod.CallUnary(ctx, req)
}

// DisabledMethod calls testdata.SelectiveService.DisabledMethod.
func (c *selectiveServiceClient) DisabledMethod(ctx context.Context, req *connect.Request[testdata.DisabledRequest]) (*connect.Response[testdata.DisabledResponse], error) {
	return c.disabledMethod.CallUnary(ctx, req)
}

// AnotherEnabledMethod calls testdata.SelectiveService.AnotherEnabledMethod.
func (c *selectiveServiceClient) AnotherEnabledMethod(ctx context.Context, req *connect.Request[testdata.AnotherEnabledRequest]) (*connect.Response[testdata.AnotherEnabledResponse], error) {
	return c.anotherEnabledMethod.CallUnary(ctx, req)
}

// AnotherDisabledMethod calls testdata.SelectiveService.AnotherDisabledMethod.
func (c *selectiveServiceClient) AnotherDisabledMethod(ctx context.Context, req *connect.Request[testdata.AnotherDisabledRequest]) (*connect.Response[testdata.AnotherDisabledResponse], error) {
	return c.anotherDisabledMethod.CallUnary(ctx, req)
}

// SelectiveServiceHandler is an implementation of the testdata.SelectiveService service.
type SelectiveServiceHandler interface {
	// @mcp
	// EnabledMethod should generate MCP endpoints
	EnabledMethod(context.Context, *connect.Request[testdata.EnabledRequest]) (*connect.Response[testdata.EnabledResponse], error)
	// DisabledMethod should NOT generate MCP endpoints (no @mcp tag)
	DisabledMethod(context.Context, *connect.Request[testdata.DisabledRequest]) (*connect.Response[testdata.DisabledResponse], error)
	// @mcp Enable this endpoint for MCP
	// AnotherEnabledMethod should generate MCP endpoints with additional description
	AnotherEnabledMethod(context.Context, *connect.Request[testdata.AnotherEnabledRequest]) (*connect.Response[testdata.AnotherEnabledResponse], error)
	// This method is also disabled (no @mcp tag)
	AnotherDisabledMethod(context.Context, *connect.Request[testdata.AnotherDisabledRequest]) (*connect.Response[testdata.AnotherDisabledResponse], error)
}

// NewSelectiveServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSelectiveServiceHandler(svc SelectiveServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	selectiveServiceMethods := testdata.File_testdata_selective_generation_test_proto.Services().ByName("SelectiveService").Methods()
	selectiveServiceEnabledMethodHandler := connect.NewUnaryHandler(
		SelectiveServiceEnabledMethodProcedure,
		svc.EnabledMethod,
		connect.WithSchema(selectiveServiceMethods.ByName("EnabledMethod")),
		connect.WithHandlerOptions(opts...),
	)
	selectiveServiceDisabledMethodHandler := connect.NewUnaryHandler(
		SelectiveServiceDisabledMethodProcedure,
		svc.DisabledMethod,
		connect.WithSchema(selectiveServiceMethods.ByName("DisabledMethod")),
		connect.WithHandlerOptions(opts...),
	)
	selectiveServiceAnotherEnabledMethodHandler := connect.NewUnaryHandler(
		SelectiveServiceAnotherEnabledMethodProcedure,
		svc.AnotherEnabledMethod,
		connect.WithSchema(selectiveServiceMethods.ByName("AnotherEnabledMethod")),
		connect.WithHandlerOptions(opts...),
	)
	selectiveServiceAnotherDisabledMethodHandler := connect.NewUnaryHandler(
		SelectiveServiceAnotherDisabledMethodProcedure,
		svc.AnotherDisabledMethod,
		connect.WithSchema(selectiveServiceMethods.ByName("AnotherDisabledMethod")),
		connect.WithHandlerOptions(opts...),
	)
	return "/testdata.SelectiveService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SelectiveServiceEnabledMethodProcedure:
			selectiveServiceEnabledMethodHandler.ServeHTTP(w, r)
		case SelectiveServiceDisabledMethodProcedure:
			selectiveServiceDisabledMethodHandler.ServeHTTP(w, r)
		case SelectiveServiceAnotherEnabledMethodProcedure:
			selectiveServiceAnotherEnabledMethodHandler.ServeHTTP(w, r)
		case SelectiveServiceAnotherDisabledMethodProcedure:
			selectiveServiceAnotherDisabledMethodHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSelectiveServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSelectiveServiceHandler struct{}

func (UnimplementedSelectiveServiceHandler) EnabledMethod(context.Context, *connect.Request[testdata.EnabledRequest]) (*connect.Response[testdata.EnabledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.SelectiveService.EnabledMethod is not implemented"))
}

func (UnimplementedSelectiveServiceHandler) DisabledMethod(context.Context, *connect.Request[testdata.DisabledRequest]) (*connect.Response[testdata.DisabledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.SelectiveService.DisabledMethod is not implemented"))
}

func (UnimplementedSelectiveServiceHandler) AnotherEnabledMethod(context.Context, *connect.Request[testdata.AnotherEnabledRequest]) (*connect.Response[testdata.AnotherEnabledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.SelectiveService.AnotherEnabledMethod is not implemented"))
}

func (UnimplementedSelectiveServiceHandler) AnotherDisabledMethod(context.Context, *connect.Request[testdata.AnotherDisabledRequest]) (*connect.Response[testdata.AnotherDisabledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.SelectiveService.AnotherDisabledMethod is not implemented"))
}
