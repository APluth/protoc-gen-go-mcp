// Code generated by protoc-gen-mcp-go. DO NOT EDIT.
// source: google/longrunning/operations.proto

package longrunningpbmcp

import (
	_ "cloud.google.com/go/longrunning/autogen/longrunningpb"
)

import (
	"connectrpc.com/connect"
	"context"
	"encoding/json"
	"github.com/mark3labs/mcp-go/mcp"
	mcpserver "github.com/mark3labs/mcp-go/server"
	"github.com/redpanda-data/protoc-gen-go-mcp/pkg/runtime"
	grpc "google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
)

var ()

// OperationsServer is compatible with the grpc-go server interface.
type OperationsServer interface {
}

// RegisterOperationsHandler registers standard MCP handlers for Operations
func RegisterOperationsHandler(s *mcpserver.MCPServer, srv OperationsServer, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// RegisterOperationsHandlerOpenAI registers OpenAI-compatible MCP handlers for Operations
func RegisterOperationsHandlerOpenAI(s *mcpserver.MCPServer, srv OperationsServer, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// RegisterOperationsHandlerWithProvider registers handlers for the specified LLM provider
func RegisterOperationsHandlerWithProvider(s *mcpserver.MCPServer, srv OperationsServer, provider runtime.LLMProvider, opts ...runtime.Option) {
	switch provider {
	case runtime.LLMProviderOpenAI:
		RegisterOperationsHandlerOpenAI(s, srv, opts...)
	case runtime.LLMProviderStandard:
		fallthrough
	default:
		RegisterOperationsHandler(s, srv, opts...)
	}
}

// OperationsClient is compatible with the grpc-go client interface.
type OperationsClient interface {
}

// ConnectOperationsClient is compatible with the connectrpc-go client interface.
type ConnectOperationsClient interface {
}

// ForwardToConnectOperationsClient registers a connectrpc client, to forward MCP calls to it.
func ForwardToConnectOperationsClient(s *mcpserver.MCPServer, client ConnectOperationsClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// ForwardToOperationsClient registers a gRPC client, to forward MCP calls to it.
func ForwardToOperationsClient(s *mcpserver.MCPServer, client OperationsClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}
