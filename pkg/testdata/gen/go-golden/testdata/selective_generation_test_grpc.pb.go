// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: testdata/selective_generation_test.proto

package testdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SelectiveService_EnabledMethod_FullMethodName         = "/testdata.SelectiveService/EnabledMethod"
	SelectiveService_DisabledMethod_FullMethodName        = "/testdata.SelectiveService/DisabledMethod"
	SelectiveService_AnotherEnabledMethod_FullMethodName  = "/testdata.SelectiveService/AnotherEnabledMethod"
	SelectiveService_AnotherDisabledMethod_FullMethodName = "/testdata.SelectiveService/AnotherDisabledMethod"
)

// SelectiveServiceClient is the client API for SelectiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SelectiveService tests the @mcp tag functionality
type SelectiveServiceClient interface {
	// @mcp
	// EnabledMethod should generate MCP endpoints
	EnabledMethod(ctx context.Context, in *EnabledRequest, opts ...grpc.CallOption) (*EnabledResponse, error)
	// DisabledMethod should NOT generate MCP endpoints (no @mcp tag)
	DisabledMethod(ctx context.Context, in *DisabledRequest, opts ...grpc.CallOption) (*DisabledResponse, error)
	// @mcp Enable this endpoint for MCP
	// AnotherEnabledMethod should generate MCP endpoints with additional description
	AnotherEnabledMethod(ctx context.Context, in *AnotherEnabledRequest, opts ...grpc.CallOption) (*AnotherEnabledResponse, error)
	// This method is also disabled (no @mcp tag)
	AnotherDisabledMethod(ctx context.Context, in *AnotherDisabledRequest, opts ...grpc.CallOption) (*AnotherDisabledResponse, error)
}

type selectiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectiveServiceClient(cc grpc.ClientConnInterface) SelectiveServiceClient {
	return &selectiveServiceClient{cc}
}

func (c *selectiveServiceClient) EnabledMethod(ctx context.Context, in *EnabledRequest, opts ...grpc.CallOption) (*EnabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnabledResponse)
	err := c.cc.Invoke(ctx, SelectiveService_EnabledMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectiveServiceClient) DisabledMethod(ctx context.Context, in *DisabledRequest, opts ...grpc.CallOption) (*DisabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisabledResponse)
	err := c.cc.Invoke(ctx, SelectiveService_DisabledMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectiveServiceClient) AnotherEnabledMethod(ctx context.Context, in *AnotherEnabledRequest, opts ...grpc.CallOption) (*AnotherEnabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnotherEnabledResponse)
	err := c.cc.Invoke(ctx, SelectiveService_AnotherEnabledMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectiveServiceClient) AnotherDisabledMethod(ctx context.Context, in *AnotherDisabledRequest, opts ...grpc.CallOption) (*AnotherDisabledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnotherDisabledResponse)
	err := c.cc.Invoke(ctx, SelectiveService_AnotherDisabledMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectiveServiceServer is the server API for SelectiveService service.
// All implementations must embed UnimplementedSelectiveServiceServer
// for forward compatibility.
//
// SelectiveService tests the @mcp tag functionality
type SelectiveServiceServer interface {
	// @mcp
	// EnabledMethod should generate MCP endpoints
	EnabledMethod(context.Context, *EnabledRequest) (*EnabledResponse, error)
	// DisabledMethod should NOT generate MCP endpoints (no @mcp tag)
	DisabledMethod(context.Context, *DisabledRequest) (*DisabledResponse, error)
	// @mcp Enable this endpoint for MCP
	// AnotherEnabledMethod should generate MCP endpoints with additional description
	AnotherEnabledMethod(context.Context, *AnotherEnabledRequest) (*AnotherEnabledResponse, error)
	// This method is also disabled (no @mcp tag)
	AnotherDisabledMethod(context.Context, *AnotherDisabledRequest) (*AnotherDisabledResponse, error)
	mustEmbedUnimplementedSelectiveServiceServer()
}

// UnimplementedSelectiveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSelectiveServiceServer struct{}

func (UnimplementedSelectiveServiceServer) EnabledMethod(context.Context, *EnabledRequest) (*EnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnabledMethod not implemented")
}
func (UnimplementedSelectiveServiceServer) DisabledMethod(context.Context, *DisabledRequest) (*DisabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisabledMethod not implemented")
}
func (UnimplementedSelectiveServiceServer) AnotherEnabledMethod(context.Context, *AnotherEnabledRequest) (*AnotherEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnotherEnabledMethod not implemented")
}
func (UnimplementedSelectiveServiceServer) AnotherDisabledMethod(context.Context, *AnotherDisabledRequest) (*AnotherDisabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnotherDisabledMethod not implemented")
}
func (UnimplementedSelectiveServiceServer) mustEmbedUnimplementedSelectiveServiceServer() {}
func (UnimplementedSelectiveServiceServer) testEmbeddedByValue()                          {}

// UnsafeSelectiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelectiveServiceServer will
// result in compilation errors.
type UnsafeSelectiveServiceServer interface {
	mustEmbedUnimplementedSelectiveServiceServer()
}

func RegisterSelectiveServiceServer(s grpc.ServiceRegistrar, srv SelectiveServiceServer) {
	// If the following call pancis, it indicates UnimplementedSelectiveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SelectiveService_ServiceDesc, srv)
}

func _SelectiveService_EnabledMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectiveServiceServer).EnabledMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectiveService_EnabledMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectiveServiceServer).EnabledMethod(ctx, req.(*EnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectiveService_DisabledMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectiveServiceServer).DisabledMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectiveService_DisabledMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectiveServiceServer).DisabledMethod(ctx, req.(*DisabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectiveService_AnotherEnabledMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnotherEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectiveServiceServer).AnotherEnabledMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectiveService_AnotherEnabledMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectiveServiceServer).AnotherEnabledMethod(ctx, req.(*AnotherEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectiveService_AnotherDisabledMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnotherDisabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectiveServiceServer).AnotherDisabledMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectiveService_AnotherDisabledMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectiveServiceServer).AnotherDisabledMethod(ctx, req.(*AnotherDisabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SelectiveService_ServiceDesc is the grpc.ServiceDesc for SelectiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SelectiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.SelectiveService",
	HandlerType: (*SelectiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnabledMethod",
			Handler:    _SelectiveService_EnabledMethod_Handler,
		},
		{
			MethodName: "DisabledMethod",
			Handler:    _SelectiveService_DisabledMethod_Handler,
		},
		{
			MethodName: "AnotherEnabledMethod",
			Handler:    _SelectiveService_AnotherEnabledMethod_Handler,
		},
		{
			MethodName: "AnotherDisabledMethod",
			Handler:    _SelectiveService_AnotherDisabledMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/selective_generation_test.proto",
}
